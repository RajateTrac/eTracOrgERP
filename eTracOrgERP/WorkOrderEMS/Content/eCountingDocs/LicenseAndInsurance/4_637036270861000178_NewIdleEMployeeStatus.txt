USE [workorderemslive]
GO
/****** Object:  StoredProcedure [dbo].[sp_GetIdleStatusOfEmployee]    Script Date: 4/7/2018 2:09:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Bhushan Dod
-- Create date: 26/05/2015
-- Description:	Get the idle status of all employee
-- Updated on :29/01/2016
-- =============================================
ALTER PROCEDURE [dbo].[sp_GetIdleStatusOfEmployee]

  @LocationId bigint,
  @UserId bigint 

AS
----#################
-- testing
----#################

   -- DECLARE 
   --         @LocationId bigint = 7,
			--@UserId bigint = 9
BEGIN
	  DECLARE @userIds bigint,@StartTime  varchar(max),@EndTime  varchar(max),@locationIds bigint,@QRCActivity int,
				@WorkOrderActivity int,@DarActivity int,@InfractionActivity int,	
				@ResponseMessage varchar(max),@Response int,@ResponseLocationId int, @Start varchar(max)
		SET NOCOUNT ON;
		BEGIN TRY
			BEGIN TRANSACTION;
                    
					BEGIN
					
					DECLARE @StatusTable TABLE
					 (
					 Id bigint,
					 StartTime datetime,
					 TableName nvarchar(15)
					 ) 
					 --Insert data to Table variable @StatusTable from QRCScanLog 
					 INSERT INTO @StatusTable(Id,StartTime,TableName)
					 SELECT DISTINCT QRCID,ISNULL(ModifiedOn, CreatedOn),'QRCScanLog' FROM QRCScanLog where ScanUserId = @userIds and LocationId = @locationIds ORDER BY CreatedOn,ModifiedOn DESC 
					 
					 --Insert Data From Work Order Table---
					 INSERT INTO @StatusTable(Id,StartTime,TableName)
					 SELECT DISTINCT WorkRequestAssignmentID,ISNULL(ModifiedDate, CreatedDate),'WorkRequestAssignment' FROM WorkRequestAssignment where (CreatedBy = @userIds or ModifiedBy = @userIds)
									  and LocationID = @locationIds
									  order by CreatedDate,ModifiedDate 
					 
					 --Insert Data From Work Order Table---
					 INSERT INTO @StatusTable(Id,StartTime,TableName)
					 SELECT DISTINCT DARId,ISNULL(ModifiedOn, CreatedOn),'DARDetails' from DARDetails where UserId = @userIds and LocationId = @locationIds ORDER BY CreatedOn,ModifiedOn
					 --Select data
					 set @Start = (Select top 1 StartTime from @StatusTable order by StartTime desc)




					-- This query added for customize idle time of emp .If emp is idle for 30 min and idle time is 10 .For that to avoid condition.
							select @userIds= ll.UserID,@StartTime= @Start,@EndTime= DATEADD(second,(DATEPART(minute,ur.IdleTimeLimit)* 60 ) + (DATEPART(second,ur.IdleTimeLimit)),@Start)
								  ,@locationIds = ll.locationId from LoginLog ll
										inner join userregistrations ur on ll.UserID = ur.UserId
											where ll.LocationId = @LocationId and ll.UserID =@UserId and  ll.UserType = 3 and ll.IsActive =1		
						--select @userIds= UserID,@StartTime= CreatedOn,@EndTime= DATEADD(minute,30,CreatedOn),@locationIds = locationId from LoginLog where LocationId = @LocationId and UserID =@UserId and  UserType = 3
						--select @userIds as UserId,@StartTime as StartTime,@EndTime as EndTime,@locationIds as LocationId

						/****************** Here we check the main used table for idle state **************************/
						select @QRCActivity= count(QRCScanLogId) from QRCScanLog where ScanUserId = @userIds and LocationId = @locationIds and CONVERT(datetime,CreatedOn) between CONVERT(datetime,@Start) and CONVERT(datetime,@EndTime) 
						
						select @WorkOrderActivity = count(WorkRequestAssignmentID)
							 from WorkRequestAssignment
								 where (CreatedBy = @userIds or ModifiedBy = @userIds)
									  and LocationID = @locationIds
									  and (CONVERT(datetime,CreatedDate) between CONVERT(datetime,@Start) and CONVERT(datetime,@EndTime)
									  or CONVERT(datetime,ModifiedDate) between CONVERT(datetime,@Start) and CONVERT(datetime,@EndTime))
						select @DarActivity = count(DARId) from DARDetails where UserId = @userIds and LocationId = @locationIds and CONVERT(datetime,CreatedOn) between CONVERT(datetime,@Start) and CONVERT(datetime,@EndTime) 
						select @InfractionActivity = 0
						--select @InfractionActivity = count(InfractionId) from Infraction where  (CreatedBy = @userIds or ModifiedBy = @userIds)
						--															 and LocationId = @locationIds
						--															 and CONVERT(datetime,CreatedOn) between CONVERT(datetime,@StartTime) and CONVERT(datetime,@EndTime) 
							
						/******************    end **************************/					
						--select 	@QRCActivity as QRCActivity ,@WorkOrderActivity as WorkOrderActivity ,@DarActivity as DarActivity ,@InfractionActivity as InfractionActivity 																				
						if(@QRCActivity = 0 and @WorkOrderActivity = 0 and @DarActivity = 0 and @InfractionActivity = 0)
							begin
								INSERT INTO [dbo].[TrackEmployeeStatus]
												([UserID]
												,[LocationId]
												,[IsNotifyManager]
												,[CreatedBy]
												,[CreatedOn]
												,[ModifiedBy]
												,[ModifiedOn]
												,[IsDeleted]
												,[DeletedBy]
												,[DeletedOn])
								VALUES
											(@userIds
											,@locationIds
											,null
											,@userIds
											,getutcdate()
											,null
											,null
											,0
											,null
											,null)
								set @Response = scope_identity();
								set @ResponseMessage ='Employee Idle'
								set @ResponseLocationId = @LocationId
								--set @LocationId = @locationIds
							end
						else
							begin
								set @Response = 0;
								set @ResponseMessage ='Employee Not Idle'
								set @ResponseLocationId = @LocationId

							end
				END
					IF (@@ERROR <> 0) 
						BEGIN
								ROLLBACK TRAN
									print '@@ERROR If part'
								RETURN
						END
					ELSE
						BEGIN 
								COMMIT TRANSACTION;
									print '@@ERROR Else part'				
						END

		END TRY
			  BEGIN CATCH
				 PRINT 'CATCH'
					set @Response = 0;
					set @ResponseMessage = error_Message();
					set @ResponseLocationId = @LocationId
						--ROLLBACK TRANSACTION;
			 END CATCH
			  select @Response as Response,@ResponseMessage as ResponseMessage, @ResponseLocationId as ResponseLocation
END
					









