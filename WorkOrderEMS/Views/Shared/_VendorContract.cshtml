@model WorkOrderEMS.Models.VendorSetupManagementModel
@*@model dynamic*@
@{
    long UserType = 0; bool GloblaAdminUser, ITAdminUser, OnlyAdminUser, ManagerUser, EmployeeUser, ClientUser;
    GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
    WorkOrderEMS.Models.eTracLoginModel ObjLogin = (WorkOrderEMS.Models.eTracLoginModel)Session["eTrac"];
    if (ObjLogin != null)
    {
        UserType = ObjLogin.UserRoleId;

        #region Get Active User Type Flag
        /*Get Active User Type Flag*/

        switch ((WorkOrderEMS.Helper.UserType)ObjLogin.UserRoleId)
        {
            case WorkOrderEMS.Helper.UserType.GlobalAdmin:
                GloblaAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.ITAdministrator:
                ITAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Administrator:
                OnlyAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Manager:
                ManagerUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Employee:
                EmployeeUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Client:
                ClientUser = true;
                break;
            default:
                GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
                break;
        }

        /*Get Active User Type Flag*/
        #endregion Get Active User Type Flag
    }
    else
    {
        WorkOrderEMS.Helper.AlertMessageClass ObjAlertMessageClass = new WorkOrderEMS.Helper.AlertMessageClass();
        ViewBag.AlertMessageClass = ObjAlertMessageClass.Danger; ViewBag.Message = WorkOrderEMS.Helper.CommonMessage.SessionExpired();
        Response.Redirect("~/Views/Shared/_GlobalAdminLayout.cshtml");
    }

    string myModelprefix = ViewBag.myModelprefixName;
    string UserTypeControlName = myModelprefix + "UserType";
    var routeValues = HttpContext.Current.Request.RequestContext.RouteData.Values;
    string Controller = string.Empty, ActionName = string.Empty;
    string hostingPrefix = System.Configuration.ConfigurationManager.AppSettings["hostingPrefix"];
    string ContractDocPath = System.Configuration.ConfigurationManager.AppSettings["CompanyDocuments"];

    if (routeValues != null)
    {
        if (routeValues.ContainsKey("controller"))
        {
            Controller = ViewContext.RouteData.GetRequiredString("controller");
            //Controller = routeValues["controller"].ToString();
        }
        if (routeValues.ContainsKey("action"))
        {
            ActionName = ViewContext.RouteData.GetRequiredString("action");
        }
    }

    long hiddnUserType = 0;
    if (!string.IsNullOrEmpty(ViewBag.ActionSection) && (ViewBag.ActionSection == "employee" || ViewBag.ActionSection == "user"))
    { hiddnUserType = Convert.ToInt64(WorkOrderEMS.Helper.UserType.Employee); }

}
<style>
    .roundedtext {
        border-radius: 12px
    }

    ::-webkit-input-placeholder {
        font-style: italic;
    }

    :-moz-placeholder {
        font-style: italic;
    }

    ::-moz-placeholder {
        font-style: italic;
    }

    :-ms-input-placeholder {
        font-style: italic;
    }

    .top-row > div {
        float: left;
        width: 48%;
        margin-right: 4%;
    }

    input[type="radio"] {
        height: 20px;
        width: 20px;
        background-color: #4475b5;
        color: #4475b5;
    }
</style>
@Html.ValidationSummary(true)
<input type="hidden" value='@hiddnUserType' name='@UserTypeControlName'>
<input type="hidden" name="UserModel.EmployeeCategory" id="UserCategory" value='@Controller' />

<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.maskedinput-1.3.min.js")"></script>
<div class="col-lg-12 col-md-12  col-sm-12  col-xs-12" id="myVendorContractDetails">
    <div class="panel-body">
        <div class="row">
            <div class="form-horizontal">
                <div class="form">
                    <div class="top-row">
                        <div class="field-wrap">
                            <label id="lblFirstCompany">
                                First Company<span class="req">*</span>
                            </label>
                            @if (ViewBag.OperatingHolder != null)
                            {
                                @Html.DropDownList(myModelprefix + "FirstCompany", new SelectList(ViewBag.OperatingHolder, "CompanyId", "CompanyName"), "--Select First Company--", new { @id = "FirstCompany" })}
                            else
                            {<select class="form-control" name="ContractDetailsModel.OperatingHolder" id="ddlContractHolder"><option value="">--Select--</option></select>}
                            @Html.ValidationMessageFor(model => model.VendorContractModel.FirstCompany)
                        </div>
                        <div class="field-wrap">
                            <label id="lblSecondaryCompany">
                                Secondary Company  <span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorContractModel.SecondaryCompany, null, new { @id = "SecondaryCompany" })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.SecondaryCompany)
                        </div>
                    </div>

                    <div class="top-row">
                        <div class="field-wrap">
                            <label id="lblVendorType">
                                Vendor Type<span class="req">*</span>
                            </label>
                            @if (ViewBag.VendorType != null)
                            {
                                {@Html.DropDownList(myModelprefix + "VendorType", new SelectList(ViewBag.VendorType, "VendorTypeId", "VendorTypeName"), "--Select Vendor Type--", new { @id = "VendorTypeContract" })}
                        }
                        else
                        {<select id="VendorType"><option value="-1">@ViewBag.VendorType</option></select>}
                            <div class="errorspace">
                                @Html.ValidationMessage(myModelprefix + "VendorType")
                            </div>
                        </div>
                        <div class="field-wrap">
                            <label id="lblContractType">
                                Contract Type  <span class="req">*</span>
                            </label>
                            @if (ViewBag.ContractType != null)
                            {
                                {@Html.DropDownListFor(model => model.VendorContractModel.ContractType, new SelectList(ViewBag.ContractType, "ContractTypeId", "ContractType"), "--Select Contract Type--", new { @id = "ContractType" })}
                        }
                        else
                        {<select id="ContractType"><option value="-1">@ViewBag.ContractType</option></select>}
                            <div class="errorspace">
                                @Html.ValidationMessageFor(model => model.VendorContractModel.ContractType)
                            </div>
                        </div>
                    </div>
                    <div class="top-row">
                        <div class="field-wrap">
                            <label style="font-size:16px;">
                                Contract issued by<span class="req">*</span>
                            </label>
                            <span style="margin-left:50%;">
                                @Html.RadioButtonFor(model => model.VendorContractModel.ContractIssuedBy, "Own")&nbsp;Own &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                @Html.RadioButtonFor(model => model.VendorContractModel.ContractIssuedBy, "Vendor", new { @style = "margin-left:20%;" })&nbsp;Vendor
                                @Html.ValidationMessageFor(model => model.VendorContractModel.ContractIssuedBy)
                            </span>
                        </div>
                        <div class="field-wrap">
                            <labe style="color:cornflowerblue">
                                Select Location&nbsp;:&nbsp;&nbsp;&nbsp;&nbsp;
                            </labe>
                            @if (ViewBag.LocationListData != null)
                            {
                                {@Html.DropDownListFor(model => model.VendorContractModel.SectVendorToLocation, new SelectList(ViewBag.LocationListData, "LocationId", "LocationName"), new { @id = "SelectVendorToLocation", @style = "width:50%;", @multiple = "multiple", @class = "form-control" })}
                            }
                        @*@if (ViewBag.LocationListData != null)
                            {
                                {@Html.DropDownList(myModelprefix + "SelectVendorToLocation", new SelectList(ViewBag.LocationListData, "LocationId", "LocationName"), new { @id = "SelectVendorToLocation", @multiple = "multiple", @class = "form-control" })}
                             }*@
                        else
                        {<select id="VendorContractModel.SectVendorToLocation"><option value="-1">@ViewBag.LocationListData</option></select>}
                            @*@Html.DropDownList("SectVendorToLocation", new SelectList((List<WorkOrderEMS.Models.UserLocations>)Session["eTrac_UserLocations"], "LocationId", "LocationName"), new { @id = "SectVendorToLocation", @multiple = "multiple", @class = "form-control" })*@
                            @Html.ValidationMessageFor(model => model.VendorContractModel.SectVendorToLocation)
                            @Html.Hidden("SelectedLcation")
                        </div>
                    </div>
                    <br />
                    <div class="top-row ContractExecutedByHideShow" style="display:none;">
                        <div class="field-wrap">
                            <label style="font-size:16px;">
                                Contract executed by : <span class="req">*</span>
                            </label>
                            <span style="margin-left:50%;">
                                @Html.RadioButtonFor(model => model.VendorContractModel.ContractExecutedBy, "Own", false)&nbsp;Own &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                @Html.RadioButtonFor(model => model.VendorContractModel.ContractExecutedBy, "Vendor", new { @class = "ContractExecutedClass", @style = "margin-left:20%;" })&nbsp;Vendor
                                @Html.ValidationMessageFor(model => model.VendorContractModel.ContractExecutedBy)
                            </span>
                        </div>
                    </div>
                    <br />
                    <div class="top-row">
                        <div class="field-wrap">
                            <label id="lblPrimaryPaymentMode">
                                Primary Payment Mode<span class="req">*</span>
                            </label>
                            @if (ViewBag.PaymentModeList != null)
                            {
                                {@Html.DropDownListFor(model => model.VendorContractModel.PrimaryPaymentMode, new SelectList(ViewBag.PaymentModeList, "PaymentModeId", "PaymentModeName"), "--Select Payment Mode--", new { @id = "PrimaryPaymentMode" })}
                        }
                        else
                        {<select id="VendorType"><option value="-1">@ViewBag.PaymentModeList</option></select>}
                            @Html.ValidationMessageFor(model => model.VendorContractModel.PrimaryPaymentMode)
                        </div>
                        <div class="field-wrap">
                            <label id="lblPaymentTerm">
                                Payment Term<span class="req">*</span>
                            </label>
                            @if (ViewBag.PaymentTermList != null)
                            {
                                {@Html.DropDownListFor(model => model.VendorContractModel.PaymentTerm, new SelectList(ViewBag.PaymentTermList, "PaymentTermId", "PaymentTermName"), "--Select Payment Term--", new { @id = "PaymentTerm" })}
                            }
                            else
                            {<select id="VendorType"><option value="-1">@ViewBag.PaymentTermList</option></select>}
                            @Html.ValidationMessageFor(model => model.VendorContractModel.PaymentTerm)
                        </div>
                    </div>
                    <div class="top-row">
                        <div class="field-wrap">
                            <label>
                                Grace Period<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorContractModel.GracePeriod, null, new { @id = "GracePeriod" })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.GracePeriod)
                        </div>
                        <div class="field-wrap">
                            <label id="lblvendorInvoicingFrequency">
                                Invoicing Frequency  <span class="req">*</span>
                            </label>
                            @Html.DropDownListFor(model => model.VendorContractModel.InvoicingFrequecy, new List<SelectListItem>
                                                            {
                                                               new SelectListItem() {Text = "--Select Invoicing Frequency--", Value="0"},
                                                               new SelectListItem() {Text = "Weekly", Value="Weekly"},
                                                               new SelectListItem() {Text = "Monthly", Value="Monthly"},
                                                               new SelectListItem() {Text = "Quarterly", Value="Quarterly"},
                                                               new SelectListItem() {Text = "Yearly", Value="Yearly"},
                                                             }, new { @id = "InvoicingFrequecy" })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.InvoicingFrequecy)
                        </div>
                    </div>
                    <div class="top-row">
                        <div class="field-wrap">
                            <label style="font-size:16px;">
                                Is Reccurence for PO.? <span class="req">*</span>
                            </label>
                            <span style="margin-left:50%;">
                                @Html.RadioButtonFor(model => model.VendorContractModel.ReccurenceForPO, "Y")&nbsp;Yes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                @Html.RadioButtonFor(model => model.VendorContractModel.ReccurenceForPO, "N", new { @style = "margin-left:20%;" })&nbsp;No
                                @Html.ValidationMessageFor(model => model.VendorContractModel.ReccurenceForPO)
                            </span>
                        </div>
                        <div class="field-wrap AllocationNeededClass" style="display:none;">
                            <label style="font-size:16px;">
                                Allocation Needed : <span class="req">*</span>
                            </label>
                            <span style="margin-left:50%;">
                                @Html.RadioButtonFor(model => model.VendorContractModel.AllocationNeeded, 1, false)&nbsp;Yes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                @Html.RadioButtonFor(model => model.VendorContractModel.AllocationNeeded, 2, new { @style = "margin-left:20%;" })&nbsp;No
                                @Html.ValidationMessageFor(model => model.VendorContractModel.AllocationNeeded)
                            </span>
                        </div>
                    </div>
                    <br /><br />
                    <div class="top-row">
                        <div class="field-wrap">
                            <label>
                                Start Date<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorContractModel.StartDate, null, new { @id = "StartDate", @onkeydown = "return false;" })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.StartDate)
                        </div>
                        <div class="field-wrap">
                            <label>
                                End Date<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorContractModel.EndDate, null, new { @id = "EndDate", @onkeydown = "return false;" })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.EndDate)
                        </div>
                    </div>
                    <div class="top-row">
                        <div class="field-wrap">
                            <label>
                               $ Cost During Period<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorContractModel.CostDuringPeriodForView, null, new { @id = "CostDuringPeriod"  })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.CostDuringPeriodForView)
                        </div>
                        <div class="field-wrap">
                            <label>
                               $ Annual Value Of Agreement<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorContractModel.AnnualValueOfAggrimentForView, null, new { @id = "AnnualValueOfAggriment" })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.AnnualValueOfAggrimentForView)
                        </div>
                    </div>
                    <div class="top-row ShowHideIfVendor123">
                        <div class="field-wrap">
                            <label>
                               $ Minimum Bill Amount<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorContractModel.MinimumBillAmountForView, null, new { @id = "MinimumBillAmount" })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.MinimumBillAmountForView)
                        </div>
                        <div class="field-wrap">
                            <label>
                                Bill Due Date<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorContractModel.BillDueDate, null, new { @id = "BillDueDate", @onkeydown = "return false;" })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.BillDueDate)
                        </div>
                    </div>
                    <div class="top-row">
                        <div class="field-wrap hidelatefine">
                            <label>
                                Late Fine/Fee<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorContractModel.LateFineForView, null, new { @id = "LateFine" })
                            @Html.ValidationMessageFor(model => model.VendorContractModel.LateFineForView)
                        </div>
                        <div class="field-wrap">
                            <label>
                                Contract Document
                            </label>
                            <div id="dvContractPreview">
                            </div>
                            <input id="fileuploadContract" type="file" style="margin-left:50%;" name="VendorContractModel.ContractDocumentsFile" />
                            <ul class="attachment">
                                @if (Model.VendorContractModel != null)
                                {
                                    <li style="margin-left :25%;margin-top:20px;">
                                        <a class="title" href="@Url.Content(ContractDocPath + myModelprefix + "ContractDocuments")">@myModelprefix + "ContractDocuments"</a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--Modal-->
<div class="modal fade preview" id="myModalForContract" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" style="width:40%">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">X</span></button>
                <h4 class="modal-title" id="myModalLabel">Location Allocation</h4>
            </div>
            <div class="modal-body">
                <div id="divDetailPreview" class="">
                    <div class="row">
                        <div class="form-group col-lg-6 col-md-6 col-sm-12 col-xs-12">
                            @Html.Label("Location", new { @class = "col-sm-4 control-label star" })
                            <div class="col-sm-8">
                                @if (ViewBag.LocationListData != null)
                                {
                                    {@Html.DropDownList(myModelprefix + "AllocateToLocation", new SelectList(ViewBag.LocationListData, "LocationId", "LocationName"), "--Select Location--", new { @id = "ddlLocationMultiple", @multiple = "multiple", @class = "form-control" })}
                            }
                            else
                            {<select id="VendorContractModel.AllocateToLocation"><option value="-1">@ViewBag.LocationListData</option></select>}
                                @* @Html.DropDownList("AllocateToLocation", new SelectList((List<WorkOrderEMS.Models.UserLocations>)Session["eTrac_UserLocations"], "LocationId", "LocationName"), new { @id = "ddlLocationMultiple", @multiple = "multiple", @class = "form-control" })*@
                                @*@Html.DropDownList("Services", new SelectList(ViewBag.Services, "ServiceID", "ServiceName", "Description"), new { @id = "ddlLocationMultiple", @multiple = "multiple", @class = "form-control" })*@
                                <span style="display: none; color:red;" class="">Select at least one location.</span>
                                @Html.Hidden("LocationAllocateId")
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br /><br />
            <div class="panel-footer">
                <div class="text-right">
                    @*<button type="button" class="btn btn-default bluebutton text-right" onclick="return PrintDivForVehicleDetails('DivVehicleDetailsIndex');" data-dismiss="modal">Print Details</button>*@
                    <button data-dismiss="modal" class="btn btn-primary" id="YesForSameCompany">Ok</button>
                    <button data-dismiss="modal" class="btn btn-default" id="btnCancelForSameCompany">cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>
<!--End Modal-->
<script>
    $('#CostDuringPeriod,#AnnualValueOfAggriment,#MinimumBillAmount,#LateFine').simpleMoneyFormat();
    $(document).ready(function () {
        var ServiceID;
        var LocationIDs;// = ViewBag.LocationListData;
        $('#ddlLocationMultiple').multiselect({

            maxHeight: '300',
            onChange: function (element, checked) {
                var LocationId = $('#ddlLocationMultiple option:selected');
                var Location = [];
                $(LocationId).each(function (index, Services) {
                    //if (index > 0) {
                    var ll = $(LocationId).val();
                    if (ll != undefined && parseInt(ll) > 0) {
                        //alert(parseInt(ss));// found
                        Location.push([$(this).val()]);
                    }
                    //}
                });
                $("#LocationAllocateId").val(Location);
            }
        });
        //var Arr = LocationIDs.split(',');

        //for (var i = 0; i < Arr.length; i++) {
        //    $("#ddlLocationMultiple").multiselect("select", $.trim(Arr[i]));
        //}
        //$("#ddlLocationMultiple").multiselect('rebuild');
        $('#SelectVendorToLocation').multiselect({
            maxHeight: '300',
            onChange: function (element, checked) {
                var VendorLocation = $('#SelectVendorToLocation option:selected');
                var VendorLoc = [];
                $(VendorLocation).each(function (index, Services) {
                    var ss = $(VendorLocation).val();
                    if (ss != undefined && parseInt(ss) > 0) {
                        VendorLoc.push([$(this).val()]);
                    }
                });
                $("#SelectedLcation").val(VendorLoc);
            }
        });
        var contractVal;
        $('#lblFirstCompany').hide(); $('#lblContractType').hide();
        $('#lblPrimaryPaymentMode').hide(); $('#lblPaymentTerm').hide(); $('#lblvendorInvoicingFrequency').hide();

        $("#ContractHolder").change(function () {
            contractVal = $("#ContractHolder option:selected").val();
            $("#myModalForContract").modal('show');
        });
        $("#ReccurenceForPO").change(function () {
            var ReccoringVal = $("#ReccurenceForPO option:selected").val();
            if (ReccoringVal == "Y"){
                $("#AllocationNeededClass").show();
            }
            else {
                $("#AllocationNeededClass").hide();
            }
        });

        $("#FirstCompany").live("click", function () {
            $("#lblFirstCompany").addClass('active highlight');
            $("#lblFirstCompany").show();
        });
        $("#ContractType").live("click", function () {
            $("#lblContractType").addClass('active highlight');
            $("#lblContractType").show();
        });
        $("#PrimaryPaymentMode").live("click", function () {
            $("#lblPrimaryPaymentMode").addClass('active highlight');
            $("#lblPrimaryPaymentMode").show();
        });
        $("#InvoicingFrequecy").live("click", function () {
            $("#lblvendorInvoicingFrequency").addClass('active highlight');
            $("#lblvendorInvoicingFrequency").show();
        });
        $("#PaymentTerm").live("click", function () {
            $("#lblPaymentTerm").addClass('active highlight');
            $("#lblPaymentTerm").show();
        });
        $("#vendorInvoicingFrequency").live("click", function () {
            $("#lblvendorInvoicingFrequency").addClass('active highlight');
            $("#lblvendorInvoicingFrequency").show();
            $('.ContractExecutedClass').prop('checked', true);
        });
        $(function () {
            $("#fileuploadContract").change(function () {
                $("#dvContractPreview").html("");
                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.pdf|.doc|.txt)$/;
                if (regex.test($(this).val().toLowerCase())) {
                    if ($.browser.msie && parseFloat(jQuery.browser.version) <= 9.0) {
                        $("#dvContractPreview").show();
                        $("#dvContractPreview")[0].filters.item("DXImageTransform.Microsoft.AlphaImageLoader").src = $(this).val();
                    }
                    else {
                        if (typeof (FileReader) != "undefined") {
                            $("#dvContractPreview").show();
                           // $("#dvContractPreview").append("<img />");
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                $("#dvContractPreview").attr("src", e.target.result);
                            }
                            reader.readAsDataURL($(this)[0].files[0]);
                        } else {
                            alert("This browser does not support FileReader.");
                        }
                    }
                }
            })
        })

        $('#BillDueDate,#StartDate,#EndDate').datepicker({
            format: "yyyy/mm/dd",
                startDate: new Date()
          });
    });
</script>


